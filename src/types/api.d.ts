/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/Elixirs": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Name?: string;
                    Difficulty?: components["schemas"]["ElixirDifficulty"];
                    Ingredient?: string;
                    InventorFullName?: string;
                    Manufacturer?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ElixirDto"][];
                        "application/json": components["schemas"]["ElixirDto"][];
                        "text/json": components["schemas"]["ElixirDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Elixirs/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ElixirDto"];
                        "application/json": components["schemas"]["ElixirDto"];
                        "text/json": components["schemas"]["ElixirDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Feedback": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json-patch+json": components["schemas"]["SendFeedbackCommand"];
                    "application/json": components["schemas"]["SendFeedbackCommand"];
                    "text/json": components["schemas"]["SendFeedbackCommand"];
                    "application/*+json": components["schemas"]["SendFeedbackCommand"];
                };
            };
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["Unit"];
                        "application/json": components["schemas"]["Unit"];
                        "text/json": components["schemas"]["Unit"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Houses": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    query?: components["schemas"]["GetHousesQuery"];
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["HouseDto"][];
                        "application/json": components["schemas"]["HouseDto"][];
                        "text/json": components["schemas"]["HouseDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Houses/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["HouseDto"];
                        "application/json": components["schemas"]["HouseDto"];
                        "text/json": components["schemas"]["HouseDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Ingredients": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Name?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["IngredientDto"][];
                        "application/json": components["schemas"]["IngredientDto"][];
                        "text/json": components["schemas"]["IngredientDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Ingredients/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["IngredientDto"];
                        "application/json": components["schemas"]["IngredientDto"];
                        "text/json": components["schemas"]["IngredientDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Spells": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    Name?: string;
                    Type?: components["schemas"]["SpellType"];
                    Incantation?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpellDto"][];
                        "application/json": components["schemas"]["SpellDto"][];
                        "text/json": components["schemas"]["SpellDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Spells/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["SpellDto"];
                        "application/json": components["schemas"]["SpellDto"];
                        "text/json": components["schemas"]["SpellDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Wizards": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: {
                    FirstName?: string;
                    LastName?: string;
                };
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["WizardDto"][];
                        "application/json": components["schemas"]["WizardDto"][];
                        "text/json": components["schemas"]["WizardDto"][];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/Wizards/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    id: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description Success */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["WizardDto"];
                        "application/json": components["schemas"]["WizardDto"];
                        "text/json": components["schemas"]["WizardDto"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @enum {string} */
        ElixirDifficulty: "Unknown" | "Advanced" | "Moderate" | "Beginner" | "OrdinaryWizardingLevel" | "OneOfAKind";
        ElixirDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            effect?: string | null;
            sideEffects?: string | null;
            characteristics?: string | null;
            time?: string | null;
            difficulty?: components["schemas"]["ElixirDifficulty"];
            ingredients?: components["schemas"]["IngredientDto"][] | null;
            inventors?: components["schemas"]["ElixirInventorDto"][] | null;
            manufacturer?: string | null;
        };
        ElixirInventorDto: {
            /** Format: uuid */
            id?: string;
            firstName?: string | null;
            lastName?: string | null;
        };
        /** @enum {string} */
        FeedbackType: "General" | "Bug" | "DataError" | "Suggestion";
        GetHousesQuery: Record<string, never>;
        HouseDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            houseColours?: string | null;
            founder?: string | null;
            animal?: string | null;
            element?: string | null;
            ghost?: string | null;
            commonRoom?: string | null;
            heads?: components["schemas"]["HouseHeadDto"][] | null;
            traits?: components["schemas"]["TraitDto"][] | null;
        };
        HouseHeadDto: {
            /** Format: uuid */
            id?: string;
            firstName?: string | null;
            lastName?: string | null;
        };
        IngredientDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
        };
        SendFeedbackCommand: {
            feedbackType?: components["schemas"]["FeedbackType"];
            feedback?: string | null;
            /** Format: uuid */
            entityId?: string | null;
        };
        SpellDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            incantation?: string | null;
            effect?: string | null;
            canBeVerbal?: boolean | null;
            type?: components["schemas"]["SpellType"];
            light?: components["schemas"]["SpellLight"];
            creator?: string | null;
        };
        /** @enum {string} */
        SpellLight: "None" | "Blue" | "IcyBlue" | "Red" | "Gold" | "Purple" | "Transparent" | "White" | "Green" | "Orange" | "Yellow" | "BrightBlue" | "Pink" | "Violet" | "BlueishWhite" | "Silver" | "Scarlet" | "Fire" | "FieryScarlet" | "Grey" | "DarkRed" | "Turquoise" | "PsychedelicTransparentWave" | "BrightYellow" | "BlackSmoke";
        /** @enum {string} */
        SpellType: "None" | "Charm" | "Conjuration" | "Spell" | "Transfiguration" | "HealingSpell" | "DarkCharm" | "Jinx" | "Curse" | "MagicalTransportation" | "Hex" | "CounterSpell" | "DarkArts" | "CounterJinx" | "CounterCharm" | "Untransfiguration" | "BindingMagicalContract" | "Vanishment";
        TraitDto: {
            /** Format: uuid */
            id?: string;
            name?: components["schemas"]["TraitName"];
        };
        /** @enum {string} */
        TraitName: "None" | "Courage" | "Bravery" | "Determination" | "Daring" | "Nerve" | "Chivalary" | "Hardworking" | "Patience" | "Fairness" | "Just" | "Loyalty" | "Modesty" | "Wit" | "Learning" | "Wisdom" | "Acceptance" | "Inteligence" | "Creativity" | "Resourcefulness" | "Pride" | "Cunning" | "Ambition" | "Selfpreservation";
        Unit: Record<string, never>;
        WizardDto: {
            elixirs?: components["schemas"]["WizardElixirDto"][] | null;
            /** Format: uuid */
            id?: string;
            firstName?: string | null;
            lastName?: string | null;
        };
        WizardElixirDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
